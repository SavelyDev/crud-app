basePath: /
definitions:
  domain.SignInInput:
    properties:
      email:
        type: string
      password_hash:
        type: string
    required:
    - email
    - password_hash
    type: object
  domain.TodoItem:
    properties:
      description:
        type: string
      done:
        type: boolean
      id:
        type: integer
      title:
        type: string
    required:
    - title
    type: object
  domain.TodoList:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    required:
    - title
    type: object
  domain.UpdateItemInput:
    properties:
      description:
        type: string
      done:
        type: boolean
      title:
        type: string
    type: object
  domain.UpdateListInput:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  domain.User:
    properties:
      email:
        type: string
      name:
        type: string
      password_hash:
        type: string
    required:
    - email
    - name
    - password_hash
    type: object
  httputil.HTTPError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:80
info:
  contact: {}
  title: CRUD-APP API
  version: "1.0"
paths:
  /api/items/{id}:
    delete:
      description: Delete a specific todo item by its ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete Item
      tags:
      - items
    get:
      description: Get a specific todo item by its ID
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.TodoItem'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get Item By ID
      tags:
      - items
    put:
      consumes:
      - application/json
      description: Update an existing todo item
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated item info
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateItemInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update Item
      tags:
      - items
  /api/lists:
    get:
      description: Get all todo lists for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.TodoList'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get All Lists
      tags:
      - lists
    post:
      consumes:
      - application/json
      description: Create a new todo list
      parameters:
      - description: Todo list info
        in: body
        name: list
        required: true
        schema:
          $ref: '#/definitions/domain.TodoList'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create List
      tags:
      - lists
  /api/lists/{id}:
    delete:
      description: Delete a specific todo list by its ID
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete List
      tags:
      - lists
    get:
      description: Get a specific todo list by its ID
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.TodoList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get List By ID
      tags:
      - lists
    put:
      consumes:
      - application/json
      description: Update an existing todo list
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated list info
        in: body
        name: list
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateListInput'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update List
      tags:
      - lists
  /api/lists/{id}/items:
    get:
      description: Get all todo items for a specific list
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.TodoItem'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get All Items
      tags:
      - items
    post:
      consumes:
      - application/json
      description: Create a new todo item
      parameters:
      - description: List ID
        in: path
        name: id
        required: true
        type: integer
      - description: Todo item info
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/domain.TodoItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create Item
      tags:
      - items
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a token
      parameters:
      - description: Sign in credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/domain.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Sign In
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.HTTPError'
      summary: Sign Up
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
